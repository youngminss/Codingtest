def solution(p,w,words):
    length = len(words)
    keyboard = { 
        ' ' : [1,p], 
        'A' : [2,p],'B' : [2,p*2], 'C' : [2,p*3],
        'D' : [3,p], 'E' : [3,p*2], 'F' : [3,p*3],
        'G' : [4,p], 'H' : [4,p*2], 'I' : [4,p*3],
        'J' : [5,p], 'K' : [5,p*2], 'L' : [5,p*3], 
        'M' : [6,p], 'N' : [6,p*2], 'O' : [6,p*3], 
        'P' : [7,p], 'Q' : [7,p*2], 'R' : [7,p*3], 'S' : [7,p*4], 
        'T' : [8,p], 'U' : [8,p*2], 'V' : [8,p*3], 
        'W' : [9,p], 'X' : [9,p*2], 'Y' : [9,p*3], 'Z' : [9,p*4]
    }
    
    second = keyboard[words[0]][1]
    for i in range(1,length):
        if keyboard[words[i]][0] == keyboard[words[i-1]][0] :
            if keyboard[words[i]][0] == ' ':
                second += keyboard[words[i]][1]    
            else:
                second += w
                second += keyboard[words[i]][1]
        else:
            second += keyboard[words[i]][1]
       
    return second

if __name__ == '__main__':
    p,w = map(int,input().split())
    words = input()
    result = solution(p,w,words)
    print(result)

# [구현] 추억 여행
# [실행시간] O(len(words))
# [해법]
# - 문제에서 언급하는 조건에 맞는, keyboard를 만들어 놓는다.
# - 공백같은 경우는, 기다리는 시간이 없다니 주의하면 된다.

# 피처폰으로 영어를 입력하기 위해서는 알파벳이 적혀 있는 숫자 버튼을 누르면 됩니다.
# 예를 들어 A를 입력하고 싶으면 2번 버튼을 누르는 것입니다.
# 또한 C를 입력하기 위해서는 2번 버튼을 세 번 누르게 되면 C가 입력됩니다.
# 만약 AC를 입력하기 위해서는 A를 치고 난 후 일정 시간을 기다린 후 C를 치면 됩니다.
# 단, 1번을 누를 경우에는 공백이 찍히며, 공백을 연속으로 누를 때는 기다릴 필요가 없습니다.
# 자판을 이용하여 어떤 영어 메시지를 치려고 할 때, 걸리는 최소 시간을 구하는 프로그램을 작성하세요.

# [입력]
# 첫째 줄에 p와 w를 입력합니다.
# (1 ≤ p, w ≤ 1,000)
# p는 버튼을 한번 누르는 데 걸리는 시간이고, w는 AC와 같은, 
# 같은 숫자인 문자를 연속으로 찍기 위해 기다리는 시간을 의미합니다.
# 둘째 줄에는 적을 문자열을 입력합니다. 문자열의 길이는 1보다 크고, 1,000보다 작으며,
# 맨 앞과 맨 뒤에 공백이 들어오는 경우는 없습니다.
# 문자열은 알파벳 대문자와 띄어쓰기만으로 이루어져 있습니다.
# [출력]
# 첫째 줄에 메시지를 적는데 걸리는 시간을 출력합니다.

# [입력 예시]
# 2 10
# ELICE CATERPILLAR

# [출력 예시]
# 106

# [문제출처] 앨리스 AI 트랙

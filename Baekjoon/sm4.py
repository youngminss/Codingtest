# 발판 밟기
# NN개의 발판이 주어지고, 각 발판에는 양의 정수 혹은 음의 정수가 적혀있다. 특정 발판을 밟을 경우, 해당 발판에 적혀있는 숫자만큼 좌로 혹은 우로 이동하게 된다. 음수가 적혀 있을 때는 왼쪽으로, 양수가 적혀 있을 때는 오른쪽으로 이동한다. 예를 들어, 아래와 같이 발판이 주어져 있다고 하자.
# img1
# ▲ 크게보기

# 만약, 소마가 5번째 발판에 있으면 발판의 값이 4이므로 오른쪽으로 4칸 이동한다. 만약 소마가 4번째 발판에 있으면, 발판의 값이 -2이므로 왼쪽으로 2칸 이동한다.

# 소마는 1번째, 2번째, 3번째 발판에서 발판을 밟기 시작할 수 있다. 그렇게 발판을 하나하나 밟아 나가다가, 이미 밟았던 발판을 다시 밟을 경우 발판 밟기를 종료한다. 예를 들어, 소마가 1번째 발판에서 발판 밟기를 시작할 경우 아래와 같이 발판을 밟아 나간다.

# img2
# ▲ 크게보기

# 노란색은 각 회 차별 소마의 위치이고, 회색의 경우에는 이미 밟은 발판, 그리고 주황색은 이미 밟은 발판을 다시 한번 더 밟음으로써 발판 밟기가 해당 칸에서 종료되었다는 의미이다. 위의 그림과 같이 1번째 발판에서 발판 밟기를 시작할 경우 총 8개의 발판을 밟고 끝났음을 알 수 있다. 소마가 2번째 발판에서 발판 밟기를 시작했을 경우에는 6개의 발판을 밟고, 3번째 발판에서 발판 밟기를 시작했을 경우에는 7개의 발판을 밟게 된다. 따라서 소마가 1번째 발판에서 발판 밟기를 시작했을 때, 총 8개의 발판을 밟게 되고 이것이 소마가 밟을 수 있는 발판 개수의 최댓값이다.

# 발판의 개수와 각각의 발판에 적혀있는 숫자를 입력받고, 소마가 1번째, 2번째, 3번째 발판에서 발판 밟기를 시작할 수 있다고 할 때 소마가 밟을 수 있는 발판 개수의 최댓값을 출력하시오.


# 입력
# 입력의 첫 번째 줄에 발판의 개수 정수 NN을 입력받는다.
# 3 ≦ N ≦ 100
# 3≦N≦100

# 두 번째 줄에는 NN개의 숫자에 대하여 1번째 발판부터 순서대로 발판에 적혀있는 숫자를 공백을 구분자로 입력받는다. 이 숫자는 양의 정수이거나 음의 정수이다.

# 소마가 발판을 밟아 나가다가 발판의 범위를 벗어나는 경우는 고려하지 않는다.

# 출력
# 소마가 1번째, 2번째, 3번째 발판에서 발판 밟기를 시작할 수 있다고 할 때 소마가 밟을 수 있는 발판 개수의 최댓값을 출력한다.

# 입력 예시
# 10
# 3 5 -1 -2 4 4 3 -2 -3 -2

# 출력 예시
# 8

def hashing(arr,n,start):
    index = start
    visited = [0]*n
    visited[start] = 1
    count = 1
    
    while True:
        if visited[index + arr[index]] == 0:
            count += 1
            visited[index + arr[index]] = 1
            index = index + arr[index]
        else:
            count += 1
            break
    return count

    

def main():
    num = int(input())
    datas = list(map(int,input().split()))

    x = hashing(datas,num,0)
    y = hashing(datas,num,1)
    z = hashing(datas,num,2)

    print(max(x,y,z))
    

if __name__=="__main__":
    main()